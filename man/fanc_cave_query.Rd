% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cave.R
\name{fanc_cave_query}
\alias{fanc_cave_query}
\alias{banc_cave_query}
\title{Query FANC tables in the CAVE annotation system}
\usage{
fanc_cave_query(
  table,
  datastack_name = NULL,
  version = NULL,
  timestamp = NULL,
  live = is.null(version),
  timetravel = FALSE,
  filter_in_dict = NULL,
  filter_out_dict = NULL,
  filter_regex_dict = NULL,
  select_columns = NULL,
  offset = 0L,
  limit = NULL,
  fetch_all_rows = FALSE,
  ...
)

banc_cave_query(
  table,
  datastack_name = NULL,
  version = NULL,
  timestamp = NULL,
  live = is.null(version),
  timetravel = FALSE,
  filter_in_dict = NULL,
  filter_out_dict = NULL,
  filter_regex_dict = NULL,
  select_columns = NULL,
  offset = 0L,
  limit = NULL,
  fetch_all_rows = FALSE,
  ...
)
}
\arguments{
\item{table}{The name of the table (or view, see views section) to query}

\item{datastack_name}{An optional CAVE \code{datastack_name}. If unset a
sensible default is chosen.}

\item{version}{An optional CAVE materialisation version number. See details
and examples.}

\item{timestamp}{An optional timestamp as a string or POSIXct, interpreted as
UTC when no timezone is specified.}

\item{live}{Whether to use live query mode, which updates any root ids to
their current value (or to another \code{timestamp} when provided). Values
of \code{TRUE} or \code{1} select CAVE's \emph{Live} mode, while \code{2}
selects \code{Live live} mode which gives access even to annotations that
are not part of a materialisation version. See section \bold{Live and Live
Live queries} for details.}

\item{timetravel}{Whether to interpret \code{version}/\code{timestamp} as a
defined point in the past to which the very \emph{latest} annotations will
be sent back in time, recalculating root ids as necessary.}

\item{filter_in_dict, filter_out_dict, filter_regex_dict}{Optional arguments
consisting of key value lists that restrict the returned rows (keeping only
matches or filtering out matches). Commonly used to selected rows for
specific neurons. See examples and CAVE documentation for details.}

\item{select_columns}{Either a character vector naming columns or a python
dict (required if the query involves multiple tables).}

\item{offset}{a 0-indexed row number, allows you to page through long results
(but see section \bold{CAVE Row Limits} for some caveats)}

\item{limit}{whether to limit the number of rows per query (\code{NULL}
implies no client side limit but there is typically a server side limit of
500,000 rows).}

\item{fetch_all_rows}{Whether to fetch all rows of a query that exceeds limit
(default \code{FALSE}). See section \bold{CAVE Row Limits} for some
caveats.}

\item{...}{Additional arguments passed to
\code{\link[fafbseg]{flywire_cave_query}}}
}
\value{
A data.frame
}
\description{
Query FANC tables in the CAVE annotation system
}
\examples{
\donttest{
#nucleus_mar2022=fanc_cave_query(table = "nucleus_mar2022")
neuron_somas_dec2022=fanc_cave_query(table = "neuron_somas_dec2022")
head(neuron_somas_dec2022)
hist(neuron_somas_dec2022$volume)
hist(neuron_somas_dec2022$volume^(1/3))
}
\dontrun{
points3d(fanc_raw2nm(neuron_somas_dec2022$pt_position), col='red')
}
\dontrun{
library(dplyr)
cell_info=banc_cave_query('cell_info')
cell_info \%>\%
  filter(tag2=='anterior-posterior projection pattern') \%>\%
  count(tag)
}
}
\seealso{
\code{\link[fafbseg]{flywire_cave_query}}
}
\concept{fanc-cave}
