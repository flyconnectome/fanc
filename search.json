[{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://flyconnectome.github.io/fancr/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://flyconnectome.github.io/fancr/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with fancr","title":"Getting help with fancr","text":"Thanks using fancr. ’re sorry ’re trouble, don’t worry, ’re help! get help quickly possible, please read following:","code":""},{"path":"https://flyconnectome.github.io/fancr/SUPPORT.html","id":"search","dir":"","previous_headings":"","what":"Search","title":"Getting help with fancr","text":"first thing see anyone problem : Search nat-user google group. Search GitHub issues fancr package. Search GitHub issues across whole natverse case problem related package. can add terms search search box top left page. solves problem, great!","code":""},{"path":"https://flyconnectome.github.io/fancr/SUPPORT.html","id":"known-problems","dir":"","previous_headings":"","what":"Known Problems","title":"Getting help with fancr","text":"need help known problem: found relevant thread nat-user google group: please reply . found GitHub issue: please reply details just like (click emoji button add thumbs ) let us know ’re trouble . ’ll need GitHub login . ’re sure: ask new question nat-user google group linking found.","code":""},{"path":"https://flyconnectome.github.io/fancr/SUPPORT.html","id":"new-problems","dir":"","previous_headings":"","what":"New Problems","title":"Getting help with fancr","text":"looks like new problem : just question: please ask nat-user google group. need report new bug: please file issue. ’re sure: please just ask nat-user google group! problem bug feature request, can easily return report - may able point existing report workaround.","code":""},{"path":"https://flyconnectome.github.io/fancr/SUPPORT.html","id":"good-questions-and-bug-reports","dir":"","previous_headings":"","what":"Good Questions and Bug Reports","title":"Getting help with fancr","text":"specific Include code triggered problem possible, make minimal reproducible example (reprex) much easier us help can run reprex machine without data. might want use sample data nat package help, refer publicly available data online. can use reprex package help prepare reprex. Read Get help! section tidyverse site information. Thanks help!","code":""},{"path":"https://flyconnectome.github.io/fancr/articles/BANC.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"BANC","text":"BANC female brain nerve cord dataset imaged Wei Lee’s lab (Minsu Kim Jasper Phelps). See wiki. Since BANC infrastructure similar FANC (female adult nerve cord), decided use fancr package provide basic functionality interact BANC dataset.","code":""},{"path":"https://flyconnectome.github.io/fancr/articles/BANC.html","id":"with_banc-and-choose_banc","dir":"Articles","previous_headings":"Introduction","what":"with_banc and choose_banc","title":"BANC","text":"Like underlying fafbseg package, fancr concept active segmentation. can now use choose_banc set active segmentation BANC, target fanc_ functions use BANC. course want use different dataset (fanc, flywire) need remember switch back. potentially less intrusive approach uses with_banc() temporarily switch default segmentation BANC, run code, switch back . Just wrap flywire_.* fanc_.* functions target BANC. id date? Find date root id","code":"# supervoxel id to root id with_banc(fafbseg::flywire_rootid('76071705504180616')) #> [1] \"720575941480707014\" with_banc(fafbseg::flywire_islatest('720575941472355131')) #> [1] FALSE with_banc(fafbseg::flywire_latestid('720575941472355131')) #> [1] \"720575941480707014\""},{"path":"https://flyconnectome.github.io/fancr/articles/BANC.html","id":"cave-tables","dir":"Articles","previous_headings":"Introduction","what":"CAVE tables","title":"BANC","text":"can just request specific tag type","code":"cell_info=banc_cave_query('cell_info') cell_info %>%   filter(tag2=='anterior-posterior projection pattern') %>%   count(tag) #> # A tibble: 3 × 2 #>   tag                n #>   <chr>          <int> #> 1 ascending       2190 #> 2 descending      1267 #> 3 intersegmental    16 nc=banc_cave_query('cell_info',                     filter_in_dict = list(tag2='anterior-posterior projection pattern')) nrow(nc) #> [1] 3473"},{"path":"https://flyconnectome.github.io/fancr/articles/BANC.html","id":"l2-skeletons-and-dotprops","dir":"Articles","previous_headings":"Introduction","what":"L2 skeletons and dotprops","title":"BANC","text":"BANC already set L2 cache can used get rapid neuron skeletons.  Similarly can make “dotprops” objects suitable NBLAST.","code":"n=with_banc(fanc_read_l2skel(\"720575941552483585\")) #> Default dataset set to \"brain_and_nerve_cord\". plot(n) ids <- with_banc(flywire_rootid(c(\"76070056370827492\", \"76142074315307608\", \"76142074315367069\"))) dps=with_banc(read_l2dp(ids)) #> Default dataset set to \"brain_and_nerve_cord\". plot(dps) library(nat.nblast) aba=nblast_allbyall(dps) hc=nhclust(scoremat = aba) #> The \"ward\" method has been renamed to \"ward.D\"; note new \"ward.D2\" plot(hc)"},{"path":"https://flyconnectome.github.io/fancr/articles/BANC.html","id":"using-multiple-datasets","dir":"Articles","previous_headings":"","what":"Using multiple datasets","title":"BANC","text":"use choose_banc() set BANC default dataset, don’t forget use choose_fanc() fafbseg::choose_segmentation() switch different active segmentation. expect switch multiple datasets session, recommend avoiding choose_banc() function since cause fanc_.* functions target BANC. Instead can use with_banc() mean bit typing probably avoid problems. Note opti use choose_banc(), can use with_fanc ensure fanc function indeed targets FANC.","code":"with_banc(fanc_rootid(c(\"76070056370827492\", \"76142074315307608\", \"76142074315367069\"))) choose_banc() # a banc supervoxel id fanc_rootid(\"76070056370827492\") #> [1] \"720575941494603975\" # a fanc supervoxel id with_fanc(fanc_rootid(\"73186243730767724\")) #> [1] \"648518346499897667\""},{"path":"https://flyconnectome.github.io/fancr/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Gregory Jefferis. Author, maintainer.","code":""},{"path":"https://flyconnectome.github.io/fancr/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Jefferis G (2024). fancr: Support Access Female Adult Nerve Cord (FANC) Dataset. R package version 0.5.1, https://flyconnectome.github.io/fancr/, https://github.com/flyconnectome/fancr.","code":"@Manual{,   title = {fancr: Support Access to the Female Adult Nerve Cord (FANC) Dataset},   author = {Gregory Jefferis},   year = {2024},   note = {R package version 0.5.1, https://flyconnectome.github.io/fancr/},   url = {https://github.com/flyconnectome/fancr}, }"},{"path":"https://flyconnectome.github.io/fancr/index.html","id":"fancr","dir":"","previous_headings":"","what":"Support Access to the Female Adult Nerve Cord (FANC) Dataset","title":"Support Access to the Female Adult Nerve Cord (FANC) Dataset","text":"goal fancr support analysis Female Adult Nerve Cord dataset aka (FANC), especially autosegmentation data. data made available FANC project led Wei-Chung Allen Lee (Harvard) collaborators including John Tuthill Sebastian Seung/Zetta. access FANC resources, must permissions access FANC autosegmentation dataset confirmed acceptance FANC proofreading data ownership guidelines. point linked Google account authorised (see ) access FANC online resources. Broadly speaking fancr package thin wrapper fafbseg package setting necessary default paths etc.","code":""},{"path":"https://flyconnectome.github.io/fancr/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Support Access to the Female Adult Nerve Cord (FANC) Dataset","text":"can install development version fancr github: anything useful fancr package, need authorisation access FANC resources. prove authorisation programmatic access must generate store token web browser logging approved Google account. streamlined running following command R (also set Pythonic access via cloudvolume.) check everything set properly, try:","code":"if(!requireNamespace('natmanager'))   install.packages('natmanager') natmanager::install('natverse', pkgs = 'flyconnectome/fancr')  # install required python packages esp cloudvolume/caveclient fafbseg::simple_python() # set up token - will open your browser to generate a new token fanc_set_token() # if you already have one do  # fanc_set_token(\"<my token>\") dr_fanc()  fanc_xyz2id(cbind(34495, 82783, 1954), rawcoords=TRUE) svids=fanc_leaves(\"648518346482929060\") head(svids)"},{"path":"https://flyconnectome.github.io/fancr/index.html","id":"updating","dir":"","previous_headings":"Installation","what":"Updating","title":"Support Access to the Female Adult Nerve Cord (FANC) Dataset","text":"can just repeat install instructions, ensures dependencies updated:","code":"natverse::natverse_update(update = T) natmanager::install(pkgs = 'flyconnectome/fancr') fafbseg::simple_python()"},{"path":"https://flyconnectome.github.io/fancr/reference/BANC.html","id":null,"dir":"Reference","previous_headings":"","what":"Provisional template brain object for BANC — BANC","title":"Provisional template brain object for BANC — BANC","text":"calibrated nm. See data-raw/BANC.R details generated. still provisional pending synpase cloud-based registrations.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/BANC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provisional template brain object for BANC — BANC","text":"","code":"BANC"},{"path":"https://flyconnectome.github.io/fancr/reference/BANC.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Provisional template brain object for BANC — BANC","text":"object class templatebrain dimension 262144 x 294912 x 7010.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/BANC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provisional template brain object for BANC — BANC","text":"","code":"BANC #> === Template Brain ===  #> Name: BANC  #> Short Name: BANC  #> Type: single brain  #> Sex:  F  #> Dimensions:262144 x 294912 x 7010 voxels #> Voxel size: #>   x = 4 nm #>   y = 4 NA #>   z = 45 NA #> Bounding box (nm): #>   x = , y = , z = , #>   x = , y = , z = . #> Description: The BANC (said 'the bank') is the Brain And Nerve Cord, a GridTape transmission #> electron microscopy dataset of a female adult Drosophila melanogaster's entire #> central nervous system. This dataset was generated by Jasper Phelps and  #> Minsu Kim in Wei-Chung Lee's lab at Harvard Medical School. #> 3D segmentation to extract the shapes of neurons and other objects in the #> dataset was performed by Zetta AI. The community proofreading and annotation #> effort is coordinated by FlyWire. #> See https://github.com/jasper-tms/the-BANC-fly-connectome/wiki for details.  #> DOI: # Depends on nat library(nat) boundingbox(BANC) #>         [,1]    [,2]   [,3] #> [1,]       0       0      0 #> [2,] 1048572 1179644 315405 #> attr(,\"class\") #> [1] \"boundingbox\""},{"path":"https://flyconnectome.github.io/fancr/reference/BANC.surf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified tissue surface of BANC — BANC.surf","title":"Simplified tissue surface of BANC — BANC.surf","text":"unsymmetrical normalized version mesh. calibrated nm. See data-raw/BANC.R details generated.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/BANC.surf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified tissue surface of BANC — BANC.surf","text":"","code":"BANC.surf"},{"path":"https://flyconnectome.github.io/fancr/reference/BANC.surf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simplified tissue surface of BANC — BANC.surf","text":"object class hxsurf (inherits list) length 4.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/BANC.surf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified tissue surface of BANC — BANC.surf","text":"","code":"if (FALSE) { # \\dontrun{ # Depends on nat library(nat) wire3d(BANC.surf, col='grey') } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/FANC.surf.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified tissue surface of FANC — FANC.surf","title":"Simplified tissue surface of FANC — FANC.surf","text":"unsymmetrical normalized version mesh. calibrated nm.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/FANC.surf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified tissue surface of FANC — FANC.surf","text":"","code":"FANC.surf"},{"path":"https://flyconnectome.github.io/fancr/reference/FANC.surf.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Simplified tissue surface of FANC — FANC.surf","text":"object class mesh3d length 3.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/FANC.surf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified tissue surface of FANC — FANC.surf","text":"","code":"if (FALSE) { # \\dontrun{ # Depends on nat library(nat) wire3d(FANC.surf) } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/banc_lr_position.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict whether a point is on the left or right of the BANC dataset — banc_lr_position","title":"Predict whether a point is on the left or right of the BANC dataset — banc_lr_position","text":"Predict whether point left right BANC dataset","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/banc_lr_position.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict whether a point is on the left or right of the BANC dataset — banc_lr_position","text":"","code":"banc_lr_position(x, units = c(\"nm\", \"microns\", \"raw\"), group = FALSE)"},{"path":"https://flyconnectome.github.io/fancr/reference/banc_lr_position.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict whether a point is on the left or right of the BANC dataset — banc_lr_position","text":"x object xyzmatrix can extract points, calibrated nm. units Units input output data. group Whether return mean displacement per neuron (x neuronlist)","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/banc_lr_position.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict whether a point is on the left or right of the BANC dataset — banc_lr_position","text":"vector point displacements (calibrated according units, nm default) 0 midline positive values fly's right.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/banc_lr_position.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Predict whether a point is on the left or right of the BANC dataset — banc_lr_position","text":"perfect assumes X displacement midline good indicator LR displacement. generally true infallible. Furthermore good registration used mirror_banc (still variable).","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/banc_lr_position.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predict whether a point is on the left or right of the BANC dataset — banc_lr_position","text":"","code":"library(nat) lrdiffs=banc_lr_position(xyzmatrix(BANC.surf)) if (FALSE) { # \\dontrun{ points3d(xyzmatrix(BANC.surf), col=ifelse(lrdiffs>0, 'green', 'red')) } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/choose_fanc.html","id":null,"dir":"Reference","previous_headings":"","what":"Choose or (temporarily) use the FANC autosegmentation — choose_fanc","title":"Choose or (temporarily) use the FANC autosegmentation — choose_fanc","text":"choose_fanc set=T (default) permanently sets FANC default dataset flywire_.* functions, whereas with_fanc(expr) runs expr FANC temporary target dataset. choose_banc permanently change default dataset BANC. Remember switch back choose_fanc needed. with_banc provides simple way access BANC dataset. Just wrap flywire_.* fanc_.* functions target BANC.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/choose_fanc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Choose or (temporarily) use the FANC autosegmentation — choose_fanc","text":"","code":"choose_fanc(set = TRUE)  choose_banc(set = TRUE)  with_fanc(expr, force = TRUE)  with_banc(expr)"},{"path":"https://flyconnectome.github.io/fancr/reference/choose_fanc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Choose or (temporarily) use the FANC autosegmentation — choose_fanc","text":"set Whether permanently set FANC autosegmentation default fafbseg functions. expr expression evaluate FANC default autosegmentation force Whether insist using FANC even BANC active dataset. option defaults TRUE convenience end users.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/choose_fanc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Choose or (temporarily) use the FANC autosegmentation — choose_fanc","text":"set=TRUE list containing previous values relevant global options (style options. set=FALSE named list containing option values.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/choose_fanc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Choose or (temporarily) use the FANC autosegmentation — choose_fanc","text":"fancr inherits significant amount infrastructure fafbseg package. concept active autosegmentation, turn defines one R options containing URIs pointing voxel-wise segmentation, mesh etc data. normally contained within single neuroglancer URL points multiple data layers. FANC neuroglancer scene returned fanc_scene. general recommend using fanc_.* functions with_fanc expect interact multiple datasets. note with_banc(fanc_xyz2id) yet functional XYZ location / supervoxel id service yet available yet.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/choose_fanc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Choose or (temporarily) use the FANC autosegmentation — choose_fanc","text":"","code":"if (FALSE) { # \\dontrun{ choose_fanc() options()[grep(\"^fafbseg.*url\", names(options()))] } # } # \\donttest{ with_fanc(fafbseg::flywire_islatest('648518346498254576')) #> [1] FALSE # } if (FALSE) { # \\dontrun{ with_fanc(fafbseg::flywire_latestid('648518346498254576')) with_fanc(fafbseg::flywire_latestid('648518346494405175')) } # } if (FALSE) { # \\dontrun{ # supervoxel id to root id with_banc(fafbseg::flywire_rootid('76071705504180616')) # is this id up to date? with_banc(fafbseg::flywire_islatest('720575941472355131')) # find up to date root id with_banc(fafbseg::flywire_latestid('720575941472355131')) } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/dr_fanc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print information about your FANC setup including tokens and python modules — dr_fanc","title":"Print information about your FANC setup including tokens and python modules — dr_fanc","text":"Print information FANC setup including tokens python modules","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/dr_fanc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print information about your FANC setup including tokens and python modules — dr_fanc","text":"","code":"dr_fanc()"},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/dr_fanc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print information about your FANC setup including tokens and python modules — dr_fanc","text":"","code":"if (FALSE) { # \\dontrun{ dr_fanc() } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc4to3.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert XYZ locations between FANC4 (autoseg) and FANC3 (CATMAID) — fanc4to3","title":"Convert XYZ locations between FANC4 (autoseg) and FANC3 (CATMAID) — fanc4to3","text":"Convert XYZ locations FANC4 (autoseg) FANC3 (CATMAID)","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc4to3.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert XYZ locations between FANC4 (autoseg) and FANC3 (CATMAID) — fanc4to3","text":"","code":"fanc4to3(   xyz,   rawcoords = FALSE,   swap = FALSE,   chunksize = 40000,   method = c(\"mapmany\", \"map1\"),   ... )"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc4to3.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert XYZ locations between FANC4 (autoseg) and FANC3 (CATMAID) — fanc4to3","text":"xyz Nx3 matrix coordinates rawcoords whether input values raw voxel indices nm swap TRUE applies deformation field opposite direction e.g. give coarse mapping points FAFB->FlyWire. wrong may useful. chunksize number points send server mapping many points . method Whether map many points (default) just one ... additional arguments pbapply::pblapply (used chunk requests many points) eventually POST command transform services server.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc4to3.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert XYZ locations between FANC4 (autoseg) and FANC3 (CATMAID) — fanc4to3","text":"Nx3 matrix coordinates.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc4to3.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert XYZ locations between FANC4 (autoseg) and FANC3 (CATMAID) — fanc4to3","text":"","code":"fanc3=xyzmatrix(cbind(194569.2, 470101.3, 117630)) fanc4=cbind(45224, 109317, 2614)*c(4.3,4.3,45) fanc4to3(fanc4)-fanc3 #>          X    Y Z #> [1,] 2.575 2.65 0 # can also pass in raw coordinates e.g. from neuroglancer fanc4to3(c(45224, 109317, 2614), rawcoords = TRUE) #>             X      Y      Z #> [1,] 194571.8 470104 117630  # rather small error for the approx inverse in this case fanc4to3(fanc3, swap=TRUE)-fanc4 #> Warning: Please note the FANC3->FANC4 transform is wrong but useful! #>         X      Y Z #> [1,] -5.8 -1.575 0 # \\donttest{ # ... so reverse mapping works in this case, but not always fanc_xyz2id(fanc4to3(fanc3, swap = TRUE)) #> [1] \"648518346486614449\" # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_client.html","id":null,"dir":"Reference","previous_headings":"","what":"Low level access to FANC's CAVE annotation infrastructure — fanc_cave_client","title":"Low level access to FANC's CAVE annotation infrastructure — fanc_cave_client","text":"Low level access FANC's CAVE annotation infrastructure","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_client.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low level access to FANC's CAVE annotation infrastructure — fanc_cave_client","text":"","code":"fanc_cave_client()  banc_cave_client()"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_client.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Low level access to FANC's CAVE annotation infrastructure — fanc_cave_client","text":"reticulate R object wrapping python CAVEclient.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_client.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low level access to FANC's CAVE annotation infrastructure — fanc_cave_client","text":"","code":"# \\donttest{ fcc=fanc_cave_client() tables=fcc$annotation$get_tables() fcc$materialize$get_table_metadata(tables[1]) #> $id #> [1] 33006 #>  #> $schema #> [1] \"cell_type_local\" #>  #> $table_name #> [1] \"wing_motor_neuron_table_v0\" #>  #> $aligned_volume #> [1] \"fanc_v4\" #>  #> $valid #> [1] TRUE #>  #> $created #> [1] \"2022-12-01T08:10:39.475152\" #>  #> $schema_type #> [1] \"cell_type_local\" #>  #> $user_id #> [1] \"690\" #>  #> $description #> [1] \"left and right wing motor neurons, with their identities. Identites that are still under review are denoted with a \\\"_u\\\" suffix. The left wing MNs will be in Azevedo et. al., in prep and the right side MNs are paired across the midline by eye. Table is managed by Ellen Lesser, Tuthill Lab.\" #>  #> $notice_text #> NULL #>  #> $reference_table #> NULL #>  #> $flat_segmentation_source #> NULL #>  #> $write_permission #> [1] \"PRIVATE\" #>  #> $read_permission #> [1] \"PUBLIC\" #>  #> $last_modified #> [1] \"2023-10-26T22:28:02.250171\" #>  #> $segmentation_source #> NULL #>  #> $pcg_table_name #> [1] \"mar2021_prod\" #>  #> $last_updated #> [1] \"2024-08-18T08:10:01.270751\" #>  #> $voxel_resolution #> [1]  4.3  4.3 45.0 #>  # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_query.html","id":null,"dir":"Reference","previous_headings":"","what":"Query FANC tables in the CAVE annotation system — fanc_cave_query","title":"Query FANC tables in the CAVE annotation system — fanc_cave_query","text":"Query FANC tables CAVE annotation system","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_query.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query FANC tables in the CAVE annotation system — fanc_cave_query","text":"","code":"fanc_cave_query(   table,   datastack_name = NULL,   version = NULL,   timestamp = NULL,   live = is.null(version),   timetravel = FALSE,   filter_in_dict = NULL,   filter_out_dict = NULL,   filter_regex_dict = NULL,   select_columns = NULL,   offset = 0L,   limit = NULL,   fetch_all_rows = FALSE,   ... )  banc_cave_query(   table,   datastack_name = NULL,   version = NULL,   timestamp = NULL,   live = is.null(version),   timetravel = FALSE,   filter_in_dict = NULL,   filter_out_dict = NULL,   filter_regex_dict = NULL,   select_columns = NULL,   offset = 0L,   limit = NULL,   fetch_all_rows = FALSE,   ... )"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_query.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query FANC tables in the CAVE annotation system — fanc_cave_query","text":"table name table (view, see views section) query datastack_name optional CAVE datastack_name. unset sensible default chosen. version optional CAVE materialisation version number. See details examples. timestamp optional timestamp string POSIXct, interpreted UTC timezone specified. live Whether use live query mode, updates root ids current value (another timestamp provided). Values TRUE 1 select CAVE's Live mode, 2 selects Live live mode gives access even annotations part materialisation version. See section Live Live Live queries details. timetravel Whether interpret version/timestamp defined point past latest annotations sent back time, recalculating root ids necessary. filter_in_dict, filter_out_dict, filter_regex_dict Optional arguments consisting key value lists restrict returned rows (keeping matches filtering matches). Commonly used selected rows specific neurons. See examples CAVE documentation details. select_columns Either character vector naming columns python dict (required query involves multiple tables). offset 0-indexed row number, allows page long results (see section CAVE Row Limits caveats) limit whether limit number rows per query (NULL implies client side limit typically server side limit 500,000 rows). fetch_all_rows Whether fetch rows query exceeds limit (default FALSE). See section CAVE Row Limits caveats. ... Additional arguments passed flywire_cave_query","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_query.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query FANC tables in the CAVE annotation system — fanc_cave_query","text":"data.frame","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cave_query.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query FANC tables in the CAVE annotation system — fanc_cave_query","text":"","code":"# \\donttest{ #nucleus_mar2022=fanc_cave_query(table = \"nucleus_mar2022\") neuron_somas_dec2022=fanc_cave_query(table = \"neuron_somas_dec2022\") head(neuron_somas_dec2022) #> # A tibble: 6 × 13 #>      id created             valid target_id id_ref created_ref         valid_ref #>   <int> <dttm>              <chr>   <int64> <int6> <dttm>              <chr>     #> 1  7e16 2022-12-19 14:39:30 t          7e16   7e16 2022-12-04 01:45:28 t         #> 2  7e16 2022-12-19 14:39:30 t          7e16   7e16 2022-12-04 01:45:28 t         #> 3  7e16 2022-12-19 14:39:30 t          7e16   7e16 2022-12-04 01:45:28 t         #> 4  7e16 2022-12-19 14:39:30 t          7e16   7e16 2022-12-04 01:45:28 t         #> 5  7e16 2022-12-19 14:39:30 t          7e16   7e16 2022-12-04 01:45:28 t         #> 6  7e16 2022-12-19 14:39:30 t          7e16   7e16 2022-12-04 01:45:28 t         #> # ℹ 6 more variables: volume <dbl>, pt_supervoxel_id <int64>, #> #   pt_root_id <int64>, pt_position <list<integer>>, #> #   bb_start_position <list<double>>, bb_end_position <list<double>> hist(neuron_somas_dec2022$volume)  hist(neuron_somas_dec2022$volume^(1/3))  # } if (FALSE) { # \\dontrun{ points3d(fanc_raw2nm(neuron_somas_dec2022$pt_position), col='red') } # } if (FALSE) { # \\dontrun{ library(dplyr) cell_info=banc_cave_query('cell_info') cell_info %>%   filter(tag2=='anterior-posterior projection pattern') %>%   count(tag) } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cellid_from_segid.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert between FANC cell ids and root ids — fanc_cellid_from_segid","title":"Convert between FANC cell ids and root ids — fanc_cellid_from_segid","text":"Converts FANC cell ids (survive edits) root ids (guaranteed match just one edit state). See details.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cellid_from_segid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert between FANC cell ids and root ids — fanc_cellid_from_segid","text":"","code":"fanc_cellid_from_segid(   rootids = NULL,   timestamp = NULL,   version = NULL,   cellid_table = NULL,   rval = c(\"ids\", \"data.frame\") )  fanc_segid_from_cellid(   cellids = NULL,   timestamp = NULL,   version = NULL,   rval = c(\"ids\", \"data.frame\"),   integer64 = FALSE,   cellid_table = NULL )"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cellid_from_segid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert between FANC cell ids and root ids — fanc_cellid_from_segid","text":"rootids FANC root ids form understood fanc_ids. default value NULL return cell ids. timestamp optional time stamp. give one version timestamp. missing, ids match live materialisation version including second edits. version optional integer CAVE materialisation version. give one version timestamp. missing, ids match live materialisation version including second edits. cellid_table Optional name cell id table (default value NULL find correct table). rval Whether return cell ids whole CAVE table additional columns. cellids Integer cell ids 1 around 20000 uniquely identify cell dataset. integer64 Whether return ids bit64::integer64 character vectors. Default value NA leaves ids unmodified.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cellid_from_segid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert between FANC cell ids and root ids — fanc_cellid_from_segid","text":"Either vector ids data.frame depending rval. cellid vector integer; root ids (segment ids), character vector bit64::integer64 vector depending integer64 argument.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cellid_from_segid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert between FANC cell ids and root ids — fanc_cellid_from_segid","text":"CAVE/PyChunkedGraph assigns 64 bit integer root id bodies segmentation. root ids persistent computer science sense, often exact opposite neuroscientists might imagine. Specifically, given root id matched single edit state neuron. neuron edited, root id changes. contrast, cell ids change even face edits. However, important understand correspond specific point neuron, commonly nucleus. nucleus edited away rest neuron previously belonged, cell id associated edits effectively move . details see FANC slack FANC wiki.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_cellid_from_segid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert between FANC cell ids and root ids — fanc_cellid_from_segid","text":"","code":"# \\donttest{ fanc_cellid_from_segid(fanc_latestid(\"648518346486614449\")) #> [1] 12967 # } # \\donttest{ fanc_cellid_from_segid(fanc_latestid(\"648518346486614449\")) #> [1] 12967 # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_change_log.html","id":null,"dir":"Reference","previous_headings":"","what":"Fetch change log information for one or more neurons — fanc_change_log","title":"Fetch change log information for one or more neurons — fanc_change_log","text":"Fetch change log information one neurons","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_change_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fetch change log information for one or more neurons — fanc_change_log","text":"","code":"fanc_change_log(x, tz = \"UTC\", filtered = TRUE, OmitFailures = TRUE, ...)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_change_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fetch change log information for one or more neurons — fanc_change_log","text":"x One fanc ids format understandable ngl_segments tz Time zone edit timestamps. Defaults \"UTC\" .e. Universal Time, Coordinated. Set \"\" current timezone. See .POSIXct details. filtered Whether filter edits unlikely relate current state neuron (default TRUE, see details). OmitFailures Whether omit neurons API timeout error. default value (TRUE) skip errors, NA) result hard stop error. See nlapply details. ... Additional arguments passed flywire_fetch","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_change_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fetch change log information for one or more neurons — fanc_change_log","text":"data.frame See fabseg::flywire_change_log details","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_change_log.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Fetch change log information for one or more neurons — fanc_change_log","text":"August 2021 simple wrapper fabseg::flywire_change_log. now old (less convenient format) available zetta API can obtained private fancr:::fanc_change_log_zetta function.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_change_log.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Fetch change log information for one or more neurons — fanc_change_log","text":"","code":"# \\donttest{ fanc_change_log(\"648518346473954669\") #>   operation_id           timestamp user_id #> 0          864 2021-03-23 17:43:02      69 #> 1          865 2021-03-23 17:46:30      69 #> 2          866 2021-03-23 17:50:40      69 #> 3          867 2021-03-23 17:51:18      69 #> 4          868 2021-03-23 17:52:21      69 #> 5         1548 2021-04-15 01:40:21      69 #> 6         1549 2021-04-15 01:41:03      69 #> 7        24951 2021-07-01 06:05:28    1211 #>                         before_root_ids     after_root_ids is_merge #> 0                    648518346492296936 648518346520326710    FALSE #> 1                    648518346520326710 648518346490778913    FALSE #> 2 648518346485415597 648518346490778913 648518346492883740     TRUE #> 3 648518346492883740 648518346506053173 648518346492120771     TRUE #> 4                    648518346492120771 648518346517118762    FALSE #> 5                    648518346504349342 648518346489510873    FALSE #> 6 648518346489510873 648518346517118762 648518346498254576     TRUE #> 7                    648518346498254576 648518346473954669    FALSE #>       user_name  user_affiliation #> 0 Jasper Phelps Wei-Chung Lee Lab #> 1 Jasper Phelps Wei-Chung Lee Lab #> 2 Jasper Phelps Wei-Chung Lee Lab #> 3 Jasper Phelps Wei-Chung Lee Lab #> 4 Jasper Phelps Wei-Chung Lee Lab #> 5 Jasper Phelps Wei-Chung Lee Lab #> 6 Jasper Phelps Wei-Chung Lee Lab #> 7    Arti Yadav Greg Jefferis Lab # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_ids.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a vector of FANC root ids from diverse inputs — fanc_ids","title":"Return a vector of FANC root ids from diverse inputs — fanc_ids","text":"Return vector FANC root ids diverse inputs","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_ids.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a vector of FANC root ids from diverse inputs — fanc_ids","text":"","code":"fanc_ids(x, integer64 = NA)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_ids.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a vector of FANC root ids from diverse inputs — fanc_ids","text":"x data.frame, URL vector ids integer64 Whether return ids bit64::integer64 character vectors. Default value NA leaves ids unmodified.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_ids.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a vector of FANC root ids from diverse inputs — fanc_ids","text":"vector ids","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_ids.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a vector of FANC root ids from diverse inputs — fanc_ids","text":"","code":"fanc_ids(data.frame(rootid=\"648518346474360770\")) #> [1] \"648518346474360770\""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_islatest.html","id":null,"dir":"Reference","previous_headings":"","what":"Check if a FANC root id is up to date — fanc_islatest","title":"Check if a FANC root id is up to date — fanc_islatest","text":"Check FANC root id date","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_islatest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check if a FANC root id is up to date — fanc_islatest","text":"","code":"fanc_islatest(x, timestamp = NULL, ...)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_islatest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check if a FANC root id is up to date — fanc_islatest","text":"x FlyWire rootids format understandable ngl_segments including integer64 timestamp (optional) argument set endpoint - edits time ignored (see details). ... Additional arguments passed flywire_islatest","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_islatest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check if a FANC root id is up to date — fanc_islatest","text":"","code":"fanc_islatest(\"648518346473954669\") #> [1] FALSE"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_latestid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the latest id for a FANC root id — fanc_latestid","title":"Find the latest id for a FANC root id — fanc_latestid","text":"Find latest id FANC root id","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_latestid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the latest id for a FANC root id — fanc_latestid","text":"","code":"fanc_latestid(   rootid,   sample = 1000L,   cloudvolume.url = NULL,   Verbose = FALSE,   ... )"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_latestid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the latest id for a FANC root id — fanc_latestid","text":"rootid One ore FlyWire rootids defining segment (form interpretable ngl_segments) sample absolute fractional number supervoxel ids map rootids FALSE (see details). cloudvolume.url URL CloudVolume fetch segmentation image data. default value NULL chooses flywire production segmentation dataset. Verbose set TRUE prints information fraction ... Additional arguments passed flywire_latestid","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_latestid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the latest id for a FANC root id — fanc_latestid","text":"","code":"if (FALSE) { # \\dontrun{ fanc_latestid(\"648518346473954669\") } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_leaves.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the supervoxel identifiers of a FANC neuron — fanc_leaves","title":"Find the supervoxel identifiers of a FANC neuron — fanc_leaves","text":"Find supervoxel identifiers FANC neuron","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_leaves.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the supervoxel identifiers of a FANC neuron — fanc_leaves","text":"","code":"fanc_leaves(x, integer64 = TRUE, ...)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_leaves.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the supervoxel identifiers of a FANC neuron — fanc_leaves","text":"x One FlyWire segment ids integer64 Whether return ids integer64 type (default, compact little fragile) rather character (FALSE). ... additional arguments passed flywire_leaves","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_leaves.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the supervoxel identifiers of a FANC neuron — fanc_leaves","text":"vector supervoxel ids","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_leaves.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the supervoxel identifiers of a FANC neuron — fanc_leaves","text":"","code":"if (FALSE) { # \\dontrun{ svids=fanc_leaves(\"648518346482929060\") head(svids) } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_partner_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise the connectivity of FANC neurons — fanc_partner_summary","title":"Summarise the connectivity of FANC neurons — fanc_partner_summary","text":"fanc_partners returns details unitary synaptic connection (including xyz location).","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_partner_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise the connectivity of FANC neurons — fanc_partner_summary","text":"","code":"fanc_partner_summary(   rootids,   partners = c(\"outputs\", \"inputs\"),   threshold = 0,   remove_autapses = TRUE,   cleft.threshold = 0,   datastack_name = NULL,   ... )  fanc_partners(rootids, partners = c(\"input\", \"output\"), ...)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_partner_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise the connectivity of FANC neurons — fanc_partner_summary","text":"rootids Character vector specifying one flywire rootids. convenience argument passed fanc_ids allowing pass data.frames, flywire URLs simple ids. partners Whether fetch input output synapses . threshold flywire_partner_summary return partners greater number connections query neuron(s) (default 0 returns connections) remove_autapses flywire_partner_summary whether remove autapses (defaults TRUE) cleft.threshold threshold cleft score calculated Buhmann et al 2019 (default 0, used 30-100 increase specificity) datastack_name optional CAVE datastack_name. unset sensible default chosen. ... Additional arguments passed pbsapply","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_partner_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarise the connectivity of FANC neurons — fanc_partner_summary","text":"data.frame","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_partner_summary.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Summarise the connectivity of FANC neurons — fanc_partner_summary","text":"note rootids pass must date. See example.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_partner_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise the connectivity of FANC neurons — fanc_partner_summary","text":"","code":"# NB id must be up to date sample_id=fanc_latestid(\"648518346481082458\") head(fanc_partner_summary(sample_id)) #> # A tibble: 6 × 3 #>   query              post_id            weight #>   <chr>              <chr>               <int> #> 1 648518346486614449 648518346490269367    136 #> 2 648518346486614449 648518346493875704    103 #> 3 648518346486614449 648518346501611089     85 #> 4 648518346486614449 648518346488813390     72 #> 5 648518346486614449 648518346471756187     70 #> 6 648518346486614449 648518346521763321     70 head(fanc_partner_summary(sample_id, partners='inputs')) #> # A tibble: 6 × 3 #>   query              pre_id             weight #>   <chr>              <chr>               <int> #> 1 648518346486614449 648518346494014715    108 #> 2 648518346486614449 648518346489556055     42 #> 3 648518346486614449 648518346477266376     40 #> 4 648518346486614449 648518346490339932     23 #> 5 648518346486614449 648518346491851887     21 #> 6 648518346486614449 648518346486859725     20 if (FALSE) { # \\dontrun{ # get the latest id for an outdate fanc_partner_summary(fanc_latestid(\"648518346473954669\"))  ## open fanc/flywire scene containing top partners library(dplyr) fanc_partner_summary(fanc_latestid(\"648518346494405175\"), partners='inputs') %>%   slice_max(weight, n = 20) %>%   fanc_scene(open=TRUE) } # } if (FALSE) { # \\dontrun{ # plot input and output synapses of a neuron nclear3d() fpi=fanc_partners(fanc_latestid(\"648518346481082458\"), partners='in') points3d(fanc_raw2nm(fpi$post_pt_position), col='cyan') fpo=fanc_partners(fanc_latestid(\"648518346481082458\"), partners='out') points3d(fanc_raw2nm(fpo$pre_pt_position), col='red') } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_read_l2dp.html","id":null,"dir":"Reference","previous_headings":"","what":"Read L2 skeleton or dotprops for FANC neurons using fafbseg-py — fanc_read_l2dp","title":"Read L2 skeleton or dotprops for FANC neurons using fafbseg-py — fanc_read_l2dp","text":"fanc_read_l2skel reads one neurons simplified L2 skeletons. fanc_read_l2dp reads one neurons simplified dotprops format. See read_l2skel.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_read_l2dp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read L2 skeleton or dotprops for FANC neurons using fafbseg-py — fanc_read_l2dp","text":"","code":"fanc_read_l2dp(id, OmitFailures = TRUE, dataset = NULL, ...)  fanc_read_l2skel(id, OmitFailures = TRUE, dataset = NULL, ...)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_read_l2dp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read L2 skeleton or dotprops for FANC neurons using fafbseg-py — fanc_read_l2dp","text":"id One flywire ids OmitFailures Whether drop neurons read results (rather erroring ). Default TRUE. dataset optional CAVE dataset name (expert use , default choose standard FANC dataset). See details. ... Additional arguments passed fafbseg.flywire.l2_skeleton fafbseg.flywire.l2_dotpropsfunctions.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_read_l2dp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read L2 skeleton or dotprops for FANC neurons using fafbseg-py — fanc_read_l2dp","text":"neuronlist containing one neuron dotprops objects. Note neurons calibrated nm dotprops calibrated microns.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_read_l2dp.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Read L2 skeleton or dotprops for FANC neurons using fafbseg-py — fanc_read_l2dp","text":"fanc_read_l2dp uses special data structure rapid download dotprops version neurons required NBLASTing. leverages python navis / fafbseg-py packages need install , typically using simple_python function. fanc_read_l2skel treats dataset argument little differently fanc_read_l2dp actually needs identify two data sources CAVE data See read_l2skel additional details ","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_read_l2dp.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read L2 skeleton or dotprops for FANC neurons using fafbseg-py — fanc_read_l2dp","text":"","code":"if (FALSE) { # \\dontrun{ # one time install of necessary python packages fafbseg::simple_python(pkgs=\"fafbseg\")  dnp42=c(\"648518346507131167\", \"648518346485772414\") dnp42.latest=fanc_latestid(dnp42) dnp42.dps <- fanc_read_l2dp(dnp42.latest)  # plot those nclear3d() plot3d(dnp42.dps, lwd=3) # nb dotprops are always in microns wire3d(FANC.surf/1e3, col='grey')  nclear3d() dnp42.skel <- fanc_read_l2skel(dnp42.latest) plot3d(dnp42.skel, lwd=2) # nb neuron skeletons are in nm wire3d(FANC.surf, col='grey') } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_rootid.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the root identifier of a FANC neuron — fanc_rootid","title":"Find the root identifier of a FANC neuron — fanc_rootid","text":"Find root identifier FANC neuron","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_rootid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the root identifier of a FANC neuron — fanc_rootid","text":"","code":"fanc_rootid(x, integer64 = FALSE, ...)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_rootid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Find the root identifier of a FANC neuron — fanc_rootid","text":"x One FlyWire segment ids integer64 Whether return ids integer64 type (compact little fragile) rather character (default FALSE). ... Additional arguments passed pbapply::pbsapply eventually Python cv$CloudVolume object.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_rootid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the root identifier of a FANC neuron — fanc_rootid","text":"vector root ids (default character)","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_rootid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the root identifier of a FANC neuron — fanc_rootid","text":"","code":"# \\donttest{ fanc_rootid(\"73186243730767724\") #> [1] \"648518346499897667\" # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_scene.html","id":null,"dir":"Reference","previous_headings":"","what":"Return a sample Neuroglancer scene URL for FANC dataset — fanc_scene","title":"Return a sample Neuroglancer scene URL for FANC dataset — fanc_scene","text":"Return sample Neuroglancer scene URL FANC dataset","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_scene.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return a sample Neuroglancer scene URL for FANC dataset — fanc_scene","text":"","code":"fanc_scene(ids = NULL, open = FALSE)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_scene.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return a sample Neuroglancer scene URL for FANC dataset — fanc_scene","text":"ids set root ids include scene. Can also data.frame. open Whether open URL browser (see browseURL)","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_scene.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return a sample Neuroglancer scene URL for FANC dataset — fanc_scene","text":"character vector containing single Neuroglancer URL (invisibly open=TRUE).","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_scene.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Return a sample Neuroglancer scene URL for FANC dataset — fanc_scene","text":"See FANC slack details.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_scene.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return a sample Neuroglancer scene URL for FANC dataset — fanc_scene","text":"","code":"if (FALSE) { # \\dontrun{ browseURL(fanc_scene()) fanc_scene(open=T) fanc_scene(\"648518346498254576\", open=T) } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_set_token.html","id":null,"dir":"Reference","previous_headings":"","what":"Set the token to be used to authenticate to FANC autosegmentation resources — fanc_set_token","title":"Set the token to be used to authenticate to FANC autosegmentation resources — fanc_set_token","text":"Set token used authenticate FANC autosegmentation resources","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_set_token.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set the token to be used to authenticate to FANC autosegmentation resources — fanc_set_token","text":"","code":"fanc_set_token(token = NULL)"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_set_token.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set the token to be used to authenticate to FANC autosegmentation resources — fanc_set_token","text":"token optional token string. missing prompted generate new token via browser.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_set_token.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set the token to be used to authenticate to FANC autosegmentation resources — fanc_set_token","text":"path token file (invisibly)","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_voxdims.html","id":null,"dir":"Reference","previous_headings":"","what":"Handle raw and nm calibrated FANC coordinates — fanc_voxdims","title":"Handle raw and nm calibrated FANC coordinates — fanc_voxdims","text":"fanc_voxdims returns image voxel dimensions normally used scale raw nm coordinates. banc_voxdims returns image voxel dimensions BANC normally used scale raw nm coordinates.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_voxdims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handle raw and nm calibrated FANC coordinates — fanc_voxdims","text":"","code":"fanc_voxdims(url = choose_fanc(set = FALSE)[[\"fafbseg.sampleurl\"]])  banc_voxdims(url = choose_banc(set = FALSE)[[\"fafbseg.sampleurl\"]])  fanc_nm2raw(x, vd = fanc_voxdims())  fanc_raw2nm(x, vd = fanc_voxdims())  banc_raw2nm(x, vd = banc_voxdims())  banc_nm2raw(x, vd = banc_voxdims())"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_voxdims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handle raw and nm calibrated FANC coordinates — fanc_voxdims","text":"url Optional neuroglancer URL containing voxel size. Defaults getOption(\"fafbseg.sampleurl\") set choose_fanc. x 3D coordinates form compatible xyzmatrix vd voxel dimensions nm. Expert use . Normally found automatically.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_voxdims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Handle raw and nm calibrated FANC coordinates — fanc_voxdims","text":"fanc_voxdims 3-vector fanc_raw2nm fanc_nm2raw Nx3 matrix coordinates","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_voxdims.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Handle raw and nm calibrated FANC coordinates — fanc_voxdims","text":"relies nat >= 1.10.4","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_voxdims.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Handle raw and nm calibrated FANC coordinates — fanc_voxdims","text":"","code":"fanc_voxdims() #> [1]  4.3  4.3 45.0 #> attr(,\"units\") #> [1] \"nm\" fanc_raw2nm(c(159144, 22192, 3560)) #>             X       Y      Z #> [1,] 684319.2 95425.6 160200 fanc_raw2nm('159144 22192 3560') #>             X       Y      Z #> [1,] 684319.2 95425.6 160200 if (FALSE) { # \\dontrun{ fanc_nm2raw(clipr::read_clip()) } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_xyz2id.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert xyz locations to root or supervoxel ids — fanc_xyz2id","title":"Convert xyz locations to root or supervoxel ids — fanc_xyz2id","text":"Convert xyz locations root supervoxel ids","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_xyz2id.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert xyz locations to root or supervoxel ids — fanc_xyz2id","text":"","code":"fanc_xyz2id(   xyz,   rawcoords = FALSE,   voxdims = c(4.3, 4.3, 45),   root = TRUE,   ... )"},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_xyz2id.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert xyz locations to root or supervoxel ids — fanc_xyz2id","text":"xyz One xyz locations Nx3 matrix form compatible xyzmatrix including neuron mesh3d surface objects. rawcoords whether input values raw voxel indices nm voxdims voxel dimensions (nm). See details. root Whether return root id whole segment rather supervoxel id. ... additional arguments passed pbapply looking multiple positions.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_xyz2id.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert xyz locations to root or supervoxel ids — fanc_xyz2id","text":"character vector segment ids, NA lookup fails.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_xyz2id.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Convert xyz locations to root or supervoxel ids — fanc_xyz2id","text":"used slow supervoxel field spine. somewhat puzzled voxel dimensions FANC. Neuroglancer clearly shows voxel coordinates 4.3x4.3x45. function, voxel coordinates must set 4.25 x-y give correct answers.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fanc_xyz2id.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert xyz locations to root or supervoxel ids — fanc_xyz2id","text":"","code":"# a point from neuroglancer, should map to 648518346498932033 fanc_xyz2id(cbind(34495, 82783, 1954), rawcoords=TRUE) #> [1] \"648518346499897667\""},{"path":"https://flyconnectome.github.io/fancr/reference/fancr-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fancr: Support Access to the Female Adult Nerve Cord (FANC) Dataset — fancr-package","title":"fancr: Support Access to the Female Adult Nerve Cord (FANC) Dataset — fancr-package","text":"Access FANC EM dataset, focussing support autosegmentation. Organised thin wrapper around fafbseg package.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/fancr-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fancr: Support Access to the Female Adult Nerve Cord (FANC) Dataset — fancr-package","text":"Maintainer: Gregory Jefferis jefferis@gmail.com (ORCID)","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc.html","id":null,"dir":"Reference","previous_headings":"","what":"Mirror points, neurons in BANC space — mirror_banc","title":"Mirror points, neurons in BANC space — mirror_banc","text":"Mirror points, neurons BANC space","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mirror points, neurons in BANC space — mirror_banc","text":"","code":"mirror_banc(x, units = c(\"nm\", \"microns\", \"raw\"), subset = NULL)"},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mirror points, neurons in BANC space — mirror_banc","text":"x Points, neurons objects compatible xyzmatrix units Units input output data. subset Optional argument transform subset neuron list.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mirror points, neurons in BANC space — mirror_banc","text":"transformed object (calibrated according units argument)","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mirror points, neurons in BANC space — mirror_banc","text":"mirroring registration currently bad central brain thoracic ganglion, good abdominal ganglion, poor optic lobes.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mirror points, neurons in BANC space — mirror_banc","text":"","code":"BANC.surf.m <- mirror_banc(BANC.surf) #> Warning: provided 4 variables to replace 3 variables if (FALSE) { # \\dontrun{ library(nat) wire3d(BANC.surf) # clearly not great in some places, especially optic lobe, but still useful wire3d(BANC.surf.m, col='red') } # }"},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Provisional mirroring registration for BANC (lanmarks+thin plate splines) — mirror_banc_lm","title":"Provisional mirroring registration for BANC (lanmarks+thin plate splines) — mirror_banc_lm","text":"calibrated nm. See data-raw/mirror_banc.R details generated. still provisional pending synpase cloud-based registrations.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provisional mirroring registration for BANC (lanmarks+thin plate splines) — mirror_banc_lm","text":"","code":"mirror_banc_lm"},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc_lm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Provisional mirroring registration for BANC (lanmarks+thin plate splines) — mirror_banc_lm","text":"object class tpsreg length 2.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/mirror_banc_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provisional mirroring registration for BANC (lanmarks+thin plate splines) — mirror_banc_lm","text":"","code":"utils::str(mirror_banc_lm) #> List of 2 #>  $ refmat: num [1:58, 1:3] 489926 560133 510763 517672 597499 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:3] \"X\" \"Y\" \"Z\" #>  $ tarmat: num [1:58, 1:3] 410701 473970 511045 491923 433686 ... #>   ..- attr(*, \"dimnames\")=List of 2 #>   .. ..$ : NULL #>   .. ..$ : chr [1:3] \"X\" \"Y\" \"Z\" #>  - attr(*, \"class\")= chr \"tpsreg\""},{"path":"https://flyconnectome.github.io/fancr/reference/read_fanc_meshes.html","id":null,"dir":"Reference","previous_headings":"","what":"Read one or more FANC neuron meshes — read_fanc_meshes","title":"Read one or more FANC neuron meshes — read_fanc_meshes","text":"Read one FANC neuron meshes","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/read_fanc_meshes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read one or more FANC neuron meshes — read_fanc_meshes","text":"","code":"read_fanc_meshes(ids, savedir = NULL, format = c(\"ply\", \"obj\"), ...)"},{"path":"https://flyconnectome.github.io/fancr/reference/read_fanc_meshes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read one or more FANC neuron meshes — read_fanc_meshes","text":"ids One root ids savedir optional location save downloaded meshes. acts simple effective cache since flywire neurons change id whenever edited. format whether save meshes Wavefront obj Stanford poly format. obj default ply simpler compact format. ... Additional arguments passed fafbseg::read_cloudvolume_meshes","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/read_fanc_meshes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read one or more FANC neuron meshes — read_fanc_meshes","text":"neuronlist containing one mesh3d objects. See nat::read.neurons details.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/reference/read_fanc_meshes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Read one or more FANC neuron meshes — read_fanc_meshes","text":"","code":"# \\donttest{ read_fanc_meshes(\"648518346482929060\") #>   downloading meshes #>   parsing downloaded meshes #> 'neuronlist' containing 1 'mesh3d' object and 'data.frame' with 0 vars [12.5 MB] # }"},{"path":"https://flyconnectome.github.io/fancr/reference/transform_fanc2manc.html","id":null,"dir":"Reference","previous_headings":"","what":"Transform FANC to MANC — transform_fanc2manc","title":"Transform FANC to MANC — transform_fanc2manc","text":"transforms neurons, surfaces point data onto FANC MANC space.","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/transform_fanc2manc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Transform FANC to MANC — transform_fanc2manc","text":"","code":"transform_fanc2manc(x, inverse = F, ...)"},{"path":"https://flyconnectome.github.io/fancr/reference/transform_fanc2manc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Transform FANC to MANC — transform_fanc2manc","text":"x object transform (calibrated nm) inverse boolean flag says whether swap registration ... additional arguments passed (passed xform)","code":""},{"path":"https://flyconnectome.github.io/fancr/reference/transform_fanc2manc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Transform FANC to MANC — transform_fanc2manc","text":"","code":"if (FALSE) { # \\dontrun{ library(nat) library(malevnc) FANC.in.manc <- transform_fanc2manc(FANC.surf) # plot MANC and FANC mesh for comparison wire3d(malevnc::MANC.surf, col='grey', add=T) wire3d(FANC.in.manc/1e3, col='blue',add=T) } # }"},{"path":"https://flyconnectome.github.io/fancr/news/index.html","id":"fancr-051","dir":"Changelog","previous_headings":"","what":"fancr 0.5.1","title":"fancr 0.5.1","text":"update fanc_cave_query() banc_cave_query() match changes underlying fafbseg::flywire_cave_query() crucially changing default live=TRUE live=!.null(version). insisting fafbseg >= 0.15.0 also provides support new timetravel argument / CAVE live live query.","code":""},{"path":[]},{"path":"https://flyconnectome.github.io/fancr/news/index.html","id":"whats-changed-0-5-0","dir":"Changelog","previous_headings":"","what":"What’s Changed","title":"fancr 0.5.0","text":"add fanc_cellid_table() use cell ids @jefferis https://github.com/flyconnectome/fancr/pull/7 basic support BANC via with_banc(), banc_cave_query(), banc_cave_client() @jefferis https://github.com/flyconnectome/fancr/pull/8 fix fanc_partner_summary() banc data fix fanc_cellid_from_segid() rootids=NULL Full Changelog: https://github.com/flyconnectome/fancr/compare/v0.4.0…v0.5.0","code":""},{"path":"https://flyconnectome.github.io/fancr/news/index.html","id":"fancr-040","dir":"Changelog","previous_headings":"","what":"fancr 0.4.0","title":"fancr 0.4.0","text":"Update spine URL fanc4to3() cope server move (#5, @jefferis) FANC surf mesh @dokato https://github.com/flyconnectome/fancr/pull/4 fanc manc registration added @dokato https://github.com/flyconnectome/fancr/pull/3","code":""},{"path":"https://flyconnectome.github.io/fancr/news/index.html","id":"new-contributors-0-4-0","dir":"Changelog","previous_headings":"","what":"New Contributors","title":"fancr 0.4.0","text":"@dokato made first contribution https://github.com/flyconnectome/fancr/pull/4 Full Changelog: https://github.com/flyconnectome/fancr/compare/v0.3.0…v0.4.0","code":""},{"path":"https://flyconnectome.github.io/fancr/news/index.html","id":"fancr-030","dir":"Changelog","previous_headings":"","what":"fancr 0.3.0","title":"fancr 0.3.0","text":"switch CAVE infrastructure rather Zetta. See https://global.daf-apis.com/info/ (#1) includes update return format fanc_change_log() may find need generate new token fanc_set_token()","code":""},{"path":"https://flyconnectome.github.io/fancr/news/index.html","id":"fancr-020","dir":"Changelog","previous_headings":"","what":"fancr 0.2.0","title":"fancr 0.2.0","text":"Fast fanc_xyz2id() mapping using Itanna (spine) services (now thousands per second rather 10s) Added fanc_change_log() Added dr_fanc() function Added NEWS.md file track changes package.","code":""}]
